from pyngrok import ngrok, conf
import uvicorn
import socket
import time
import os
import subprocess
import signal
import requests
import threading



# H√†m ki·ªÉm tra xem c·ªïng c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng
def is_port_in_use(port: int) -> bool:
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        return s.connect_ex(('localhost', port)) == 0

# H√†m t√¨m c·ªïng tr·ªëng
def find_free_port(start_port=8000, max_attempts=10):
    port = start_port
    attempts = 0
    
    while attempts < max_attempts:
        if not is_port_in_use(port):
            return port
        port += 1
        attempts += 1
    
    raise RuntimeError(f"Kh√¥ng t√¨m th·∫•y c·ªïng tr·ªëng sau {max_attempts} l·∫ßn th·ª≠")

# H√†m gi·∫£i ph√≥ng c·ªïng n·∫øu ƒëang b·ªã s·ª≠ d·ª•ng (Linux/macOS)
def free_port(port):
    try:
        # T√¨m process ƒëang s·ª≠ d·ª•ng c·ªïng
        result = subprocess.run(['lsof', '-i', f':{port}'], 
                              capture_output=True, text=True)
        
        # N·∫øu c√≥ process ƒëang s·ª≠ d·ª•ng
        if result.stdout:
            lines = result.stdout.strip().split('\n')
            if len(lines) > 1:  # B·ªè qua d√≤ng header
                for line in lines[1:]:
                    parts = line.split()
                    if len(parts) > 1:
                        pid = parts[1]
                        print(f"ƒêang gi·∫£i ph√≥ng process {pid} tr√™n c·ªïng {port}")
                        os.kill(int(pid), signal.SIGTERM)
                        time.sleep(1)  # Ch·ªù process k·∫øt th√∫c
                return True
    except Exception as e:
        print(f"L·ªói khi gi·∫£i ph√≥ng c·ªïng {port}: {e}")
    
    return False

# Ng·∫Øt t·∫•t c·∫£ tunnel ƒëang m·ªü
ngrok.kill()

# T√¨m c·ªïng tr·ªëng
try:
    PORT = find_free_port()
    print(f"T√¨m th·∫•y c·ªïng tr·ªëng: {PORT}")
except:
    # N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c c·ªïng tr·ªëng, c·ªë g·∫Øng gi·∫£i ph√≥ng c·ªïng 8000
    print("Kh√¥ng t√¨m th·∫•y c·ªïng tr·ªëng, ƒëang th·ª≠ gi·∫£i ph√≥ng c·ªïng 8000...")
    if free_port(8000):
        PORT = 8000
    else:
        # Th·ª≠ c·ªïng 8080 n·∫øu kh√¥ng gi·∫£i ph√≥ng ƒë∆∞·ª£c 8000
        PORT = 8080
        if is_port_in_use(PORT):
            free_port(PORT)

print(f"S·ª≠ d·ª•ng c·ªïng {PORT}")

# M·ªü tunnel ngrok
try:
    public_url = ngrok.connect(PORT)
    print(f"üåê API public URL: {public_url}")
except Exception as e:
    print(f"L·ªói khi k·∫øt n·ªëi ngrok: {e}")
    exit(1)

# Ch·∫°y ·ª©ng d·ª•ng FastAPI trong thread ri√™ng bi·ªát
def run_app():
    try:
        uvicorn.run("app:app", host="0.0.0.0", port=PORT, log_level="info")
    except Exception as e:
        print(f"L·ªói khi ch·∫°y ·ª©ng d·ª•ng: {e}")

thread = threading.Thread(target=run_app)
thread.daemon = True  # Cho ph√©p tho√°t ch∆∞∆°ng tr√¨nh khi thread c√≤n ch·∫°y
thread.start()

# ƒê·ª£i ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
print("ƒê·ª£i ·ª©ng d·ª•ng kh·ªüi ƒë·ªông...")
time.sleep(10)

# Ki·ªÉm tra ·ª©ng d·ª•ng ƒë√£ ch·∫°y ch∆∞a
try:
    response = requests.get(f"http://localhost:{PORT}")
    print(f"·ª®ng d·ª•ng ƒë√£ ch·∫°y, status code: {response.status_code}")
    print(f"Response: {response.json()}")
except Exception as e:
    print(f"L·ªói khi ki·ªÉm tra ·ª©ng d·ª•ng: {e}")
